#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double radius = 270.1800438313185
                double3 target = (0, 0, 0)
            }
            dictionary Perspective = {
                double3 position = (-17.686258971514064, 52.51496952187055, 502.9662731226373)
                double3 target = (-36.99007381299464, 11.4077862535474, -0.02879534425244401)
            }
            dictionary Right = {
                double radius = 500
                double3 target = (0, 0, 0)
            }
            dictionary Top = {
                double radius = 500
                double3 target = (0, 0, 0)
            }
            string boundCamera = "/OmniverseKit_Front"
        }
        dictionary renderSettings = {
            float "rtx:post:lensDistortion:cameraFocalLength" = 50
            token "rtx:rendermode" = "PathTracing"
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.009999999776482582
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float3 xformOp:rotateXYZ = (22, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Xform "Object" (
        prepend apiSchemas = ["SemanticsAPI:Semantics"]
    )
    {
        bool semantic:Semantics:params:decorator
        string semantic:Semantics:params:semanticData = "object"
        string semantic:Semantics:params:semanticType = "class"
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Cube"
        {
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 3, 3, 2, 4, 3, 4, 5, 5, 4, 6, 5, 6, 7, 7, 6, 8, 7, 8, 1, 1, 8, 2, 2, 8, 4, 4, 8, 6, 7, 1, 5, 5, 1, 3]
            point3f[] points = [(0, 0, 0), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
            token visibility = "inherited"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (100, 100, 100)
            double3 xformOp:translate = (-55, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def Mesh "Cube_01"
        {
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 3, 3, 2, 4, 3, 4, 5, 5, 4, 6, 5, 6, 7, 7, 6, 8, 7, 8, 1, 1, 8, 2, 2, 8, 4, 4, 8, 6, 7, 1, 5, 5, 1, 3]
            point3f[] points = [(0, 0, 0), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
            token visibility = "inherited"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (100, 100, 100)
            double3 xformOp:translate = (55, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "Occluder"
    {
        token visibility = "inherited"
        token visibility.timeSamples = {
            0: "inherited",
            11: "invisible",
        }
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 200)
        double3 xformOp:translate.timeSamples = {
            0: (0, 0, 0),
            1: (-100, 0, 0),
            2: (100, 0, 0),
            3: (0, -100, 0),
            4: (0, 100, 0),
            5: (-100, -100, 0),
            6: (100, -100, 0),
            7: (100, 0, 0),
            8: (-100, 0, 0),
            9: (100, 0, 0),
            10: (-100, 0, 0),
        }
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Cube_02"
        {
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 3, 3, 2, 4, 3, 4, 5, 5, 4, 6, 5, 6, 7, 7, 6, 8, 7, 8, 1, 1, 8, 2, 2, 8, 4, 4, 8, 6, 7, 1, 5, 5, 1, 3]
            point3f[] points = [(0, 0, 0), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
            token visibility = "inherited"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (211.93092, 200, 100)
            double3 xformOp:translate = (0, 0, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }

    def Xform "Occluder_2"
    {
        token visibility = "inherited"
        token visibility.timeSamples = {
            0: "invisible",
            7: "inherited",
            11: "invisible",
        }
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 200)
        double3 xformOp:translate.timeSamples = {
            0: (0, 0, 0),
            7: (0, -100, 0),
            8: (0, -100, 0),
            9: (0, 100, 0),
        }
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "Cube_03"
        {
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [1, 2, 3, 3, 2, 4, 3, 4, 5, 5, 4, 6, 5, 6, 7, 7, 6, 8, 7, 8, 1, 1, 8, 2, 2, 8, 4, 4, 8, 6, 7, 1, 5, 5, 1, 3]
            point3f[] points = [(0, 0, 0), (-0.5, -0.5, 0.5), (0.5, -0.5, 0.5), (-0.5, 0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5)]
            token visibility = "inherited"
            float3 xformOp:rotateXYZ = (0, -0, 0)
            float3 xformOp:scale = (217.9884, 200, 100)
            double3 xformOp:translate = (0, 0, 100)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }
}

