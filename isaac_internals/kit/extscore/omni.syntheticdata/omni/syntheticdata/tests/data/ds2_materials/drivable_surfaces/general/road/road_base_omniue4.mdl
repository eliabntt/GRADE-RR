mdl 1.3;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using ..::..::..::OmniUe4Function import *;
using ..::..::..::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material road_base(
	float WorldSpaceUVMult = 5000.0,
	float Set1Tile = 2.5,
	uniform texture_2d Set1SuperNormal = texture_2d("./road_base/set1supernormal.TGA",::tex::gamma_linear)
	[[sampler_color()]],
	float Set2Tile = 4.0,
	uniform texture_2d Set2SuperNormal = texture_2d("./road_base/set1supernormal.TGA",::tex::gamma_linear)
	[[sampler_color()]],
	float Set1Set2BlendNoiseTile = 1.0,
	uniform texture_2d Set1Set2BlendNoise = texture_2d("./road_base/t_noise_d.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float NormalConvert = 1.0,
	float NormalAmount = 0.2,
	float Puddle_NormalAmount = 0.0,
	float Puddle_NoiseTile = 0.5,
	uniform texture_2d PuddleNoise = texture_2d("./road_base/t_noise01.png",::tex::gamma_srgb)
	[[sampler_color()]],
	float Puddle_NoiseBlend = 1.0,
	uniform texture_2d Set1SuperAlbedo = texture_2d("./road_base/set1superalbedo.TGA",::tex::gamma_srgb)
	[[sampler_color()]],
	uniform texture_2d Set2SuperAlbedo = texture_2d("./road_base/set1superalbedo.TGA",::tex::gamma_srgb)
	[[sampler_color()]],
	float AlbedoMult = 2.0,
	float Puddle_AlbedoMult = 1.0,
	float SpecularPow_Order1 = 1.0,
	float SpecularMult_Order2 = 1.0,
	float Puddle_SpecularPow_Order1 = 2.0,
	float Puddle_SpecularMult_Order2 = 0.32,
	float RoughnessPow_Order1 = 1.5,
	float RoughnessMult_Order2 = 1.0,
	float RoughnessOffset_Order3 = -0.085716,
	float Puddle_RoughnessPow_Order1 = 1.0,
	float Puddle_RoughnessMult_Order2 = 1.0,
	float Puddle_RoughnessOffset_Order3 = -1.0)
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);

	float3 Local0 = ((state::transform_point(state::coordinate_internal,state::coordinate_world,state::position())*state::meters_per_scene_unit()*100.0) / WorldSpaceUVMult);
	float2 Local1 = (float2(Local0.x,Local0.y) * Set1Tile);
	float4 Local2 = tex::lookup_float4(Set1SuperNormal,float2(Local1.x,1.0-Local1.y),tex::wrap_repeat,tex::wrap_repeat);
	float2 Local3 = (float2(Local0.x,Local0.y) * Set2Tile);
	float4 Local4 = tex::lookup_float4(Set2SuperNormal,float2(Local3.x,1.0-Local3.y),tex::wrap_repeat,tex::wrap_repeat);
	float2 Local5 = (float2(Local0.x,Local0.y) * Set1Set2BlendNoiseTile);
	float4 Local6 = tex::lookup_float4(Set1Set2BlendNoise,float2(Local5.x,1.0-Local5.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local7 = math::lerp(float3(Local2.x,Local2.y,Local2.z),float3(Local4.x,Local4.y,Local4.z),Local6.x);
	float3 Local8 = (Local7 * 2.0);
	float3 Local9 = (Local8 - 1.0);
	float3 Local10 = math::lerp(Local7,Local9,NormalConvert);
	float3 Local11 = math::lerp(float3(0.0,0.0,1.0),Local10,NormalAmount);
	float3 Local12 = math::lerp(float3(0.0,0.0,1.0),Local10,Puddle_NormalAmount);
	float2 Local13 = (float2(Local0.x,Local0.y) * Puddle_NoiseTile);
	float4 Local14 = tex::lookup_float4(PuddleNoise,float2(Local13.x,1.0-Local13.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local15 = (Local14.x * Puddle_NoiseBlend);
	float3 Local16 = math::lerp(Local11,Local12,Local15);

	float3 Normal_mdl = Local16;

	float4 Local17 = tex::lookup_float4(Set1SuperAlbedo,float2(Local1.x,1.0-Local1.y),tex::wrap_repeat,tex::wrap_repeat);
	float4 Local18 = tex::lookup_float4(Set2SuperAlbedo,float2(Local3.x,1.0-Local3.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local19 = math::lerp(float3(float2(Local17.x,Local17.y).x,float2(Local17.x,Local17.y).y,Local17.z),float3(float2(Local18.x,Local18.y).x,float2(Local18.x,Local18.y).y,Local18.z),Local6.x);
	float3 Local20 = (Local19 * AlbedoMult);
	float3 Local21 = math::min(math::max(Local20,float3(0.0,0.0,0.0)),float3(1.0,1.0,1.0));
	float3 Local22 = (Local19 * Puddle_AlbedoMult);
	float3 Local23 = math::min(math::max(Local22,float3(0.0,0.0,0.0)),float3(1.0,1.0,1.0));
	float3 Local24 = math::lerp(Local21,Local23,Local15);
	float Local25 = math::lerp(Local17.w,Local18.w,Local6.x);
	float Local26 = math::pow(Local25,SpecularPow_Order1);
	float Local27 = (Local26 * SpecularMult_Order2);
	float Local28 = math::pow(Local25,Puddle_SpecularPow_Order1);
	float Local29 = (Local28 * Puddle_SpecularMult_Order2);
	float Local30 = math::lerp(Local27,Local29,Local15);
	float Local31 = math::lerp(Local2.w,Local4.w,Local6.x);
	float Local32 = math::pow(Local31,RoughnessPow_Order1);
	float Local33 = (Local32 * RoughnessMult_Order2);
	float Local34 = (Local33 + RoughnessOffset_Order3);
	float Local35 = math::pow(Local31,Puddle_RoughnessPow_Order1);
	float Local36 = (Local35 * Puddle_RoughnessMult_Order2);
	float Local37 = (Local36 + Puddle_RoughnessOffset_Order3);
	float Local38 = math::lerp(Local34,Local37,Local15);

	float3 EmissiveColor_mdl = float3(0.0,0.0,0.0);
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local24;
	float Metallic_mdl = 0.0;
	float Specular_mdl = Local30;
	float Roughness_mdl = Local38;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
